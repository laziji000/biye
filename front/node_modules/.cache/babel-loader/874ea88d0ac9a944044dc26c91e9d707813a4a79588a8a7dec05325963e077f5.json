{"ast":null,"code":"/**\r\n * 用户名\r\n * @param rule 验证规则（不含特殊字符）\r\n * @param value 需要验证的值\r\n * @param callback 回调函数\r\n */\nexport const validateUsername = (rule, value, callback) => {\n  var reg = /^[a-zA-Z0-9_\\u4e00-\\u9fa5]{1,16}$/;\n  if (value.length > 16) {\n    callback(new Error('长度不能超过16个字符'));\n  } else if (!reg.test(value)) {\n    callback(new Error('仅支持大小写英文、中文和下划线_'));\n  } else {\n    callback();\n  }\n};\n\n/**\r\n * 密码格式验证\r\n * @param rule 验证规则（不少于6位）\r\n * @param value 需要验证的值\r\n * @param callback 回调函数\r\n */\nexport const validatePassword = (rule, value, callback) => {\n  if (value.length < 6) {\n    callback(new Error('密码长度不得小于6位'));\n  } else {\n    callback();\n  }\n};\n\n/**\r\n * 手机号码格式验证\r\n * @param rule 验证规则\r\n * @param value 需要验证的值\r\n * @param callback 回调函数\r\n */\nexport const validateMobile = (rule, value, callback) => {\n  var reg = /^[1][3,4,5,6,7,8,9][0-9]{9}$/;\n  if (!reg.test(value)) {\n    callback(new Error('手机号格式错误'));\n  } else {\n    callback();\n  }\n};\n\n/**\r\n * 身份证号码格式验证\r\n * @param rule 验证规则（是否满足18位）\r\n * @param value 需要验证的值\r\n * @param callback 回调函数\r\n */\nexport const validateIDCard = (rule, value, callback) => {\n  const reg = /^[1-9]\\d{5}(18|19|([23]\\d))\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$/;\n  if (!reg.test(value)) {\n    callback(new Error('身份证号码格式错误'));\n  } else {\n    callback();\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}