{"ast":null,"code":"import axios from 'axios';\nimport { getStore, setStore } from './storage';\nimport { router } from '../router/index';\nimport { Message } from 'view-design';\nimport Cookies from 'js-cookie';\nlet base = '/zwz';\naxios.defaults.timeout = 15000;\naxios.interceptors.request.use(config => {\n  return config;\n}, err => {\n  Message.error('请求超时');\n  return Promise.resolve(err);\n});\naxios.interceptors.response.use(response => {\n  const data = response.data;\n  switch (data.code) {\n    case 401:\n      Cookies.set('userInfo', '');\n      setStore('accessToken', '');\n      if (router.history.current.name != \"login\") {\n        if (data.message !== null) {\n          Message.error(data.message);\n        } else {\n          Message.error(\"未知错误，请重新登录\");\n        }\n        router.push('/login');\n      }\n      break;\n    case 403:\n      if (data.message !== null) {\n        Message.error(data.message);\n      } else {\n        Message.error(\"未知错误\");\n      }\n      break;\n    case 500:\n      if (data.message !== null) {\n        Message.error(data.message);\n      } else {\n        Message.error(\"未知错误\");\n      }\n      break;\n    default:\n      return data;\n  }\n  return data;\n}, err => {\n  Message.error(err.toString());\n  return Promise.resolve(err);\n});\nexport const getRequest = (url, params) => {\n  let accessToken = getStore('accessToken');\n  return axios({\n    method: 'get',\n    url: `${base}${url}`,\n    params: params,\n    headers: {\n      'accessToken': accessToken\n    }\n  });\n};\nexport const postRequest = (url, params) => {\n  let accessToken = getStore(\"accessToken\");\n  return axios({\n    method: 'post',\n    url: `${base}${url}`,\n    data: params,\n    transformRequest: [function (data) {\n      let ret = '';\n      for (let it in data) {\n        ret += encodeURIComponent(it) + '=' + encodeURIComponent(data[it]) + '&';\n      }\n      ret = ret.substring(0, ret.length - 1);\n      return ret;\n    }],\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'accessToken': accessToken\n    }\n  });\n};\nexport const putRequest = (url, params) => {\n  let accessToken = getStore(\"accessToken\");\n  return axios({\n    method: 'put',\n    url: `${base}${url}`,\n    data: params,\n    transformRequest: [function (data) {\n      let ret = '';\n      for (let it in data) {\n        ret += encodeURIComponent(it) + '=' + encodeURIComponent(data[it]) + '&';\n      }\n      ret = ret.substring(0, ret.length - 1);\n      return ret;\n    }],\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'accessToken': accessToken\n    }\n  });\n};\nexport const postBodyRequest = (url, params) => {\n  let accessToken = getStore('accessToken');\n  return axios({\n    method: 'post',\n    url: `${base}${url}`,\n    data: params,\n    headers: {\n      'accessToken': accessToken\n    }\n  });\n};\nexport const getNoAuthRequest = (url, params) => {\n  return axios({\n    method: 'get',\n    url: `${base}${url}`,\n    params: params\n  });\n};\nexport const postNoAuthRequest = (url, params) => {\n  return axios({\n    method: 'post',\n    url: `${base}${url}`,\n    data: params,\n    transformRequest: [function (data) {\n      let ret = '';\n      for (let it in data) {\n        ret += encodeURIComponent(it) + '=' + encodeURIComponent(data[it]) + '&';\n      }\n      ret = ret.substring(0, ret.length - 1);\n      return ret;\n    }],\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}