{"ast":null,"code":"import XLSX from 'xlsx';\nfunction auto_width(ws, data) {\n  const colWidth = data.map(row => row.map(val => {\n    if (val == null) {\n      return {\n        'wch': 10\n      };\n    } else if (val.toString().charCodeAt(0) > 255) {\n      return {\n        'wch': val.toString().length * 2\n      };\n    } else {\n      return {\n        'wch': val.toString().length\n      };\n    }\n  }));\n  let result = colWidth[0];\n  for (let i = 1; i < colWidth.length; i++) {\n    for (let j = 0; j < colWidth[i].length; j++) {\n      if (result[j]['wch'] < colWidth[i][j]['wch']) {\n        result[j]['wch'] = colWidth[i][j]['wch'];\n      }\n    }\n  }\n  ws['!cols'] = result;\n}\nfunction json_to_array(key, jsonData) {\n  return jsonData.map(v => key.map(j => {\n    return v[j];\n  }));\n}\nfunction fixdata(data) {\n  let o = '';\n  let l = 0;\n  const w = 10240;\n  for (; l < data.byteLength / w; ++l) o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)));\n  o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)));\n  return o;\n}\nfunction get_header_row(sheet) {\n  const headers = [];\n  const range = XLSX.utils.decode_range(sheet['!ref']);\n  let C;\n  const R = range.s.r;\n  for (C = range.s.c; C <= range.e.c; ++C) {\n    var cell = sheet[XLSX.utils.encode_cell({\n      c: C,\n      r: R\n    })];\n    var hdr = 'UNKNOWN ' + C;\n    if (cell && cell.t) hdr = XLSX.utils.format_cell(cell);\n    headers.push(hdr);\n  }\n  return headers;\n}\nexport const export_table_to_excel = (id, filename) => {\n  const table = document.getElementById(id);\n  const wb = XLSX.utils.table_to_book(table);\n  XLSX.writeFile(wb, filename);\n};\nexport const export_json_to_excel = ({\n  data,\n  key,\n  title,\n  filename,\n  autoWidth\n}) => {\n  const wb = XLSX.utils.book_new();\n  data.unshift(title);\n  const ws = XLSX.utils.json_to_sheet(data, {\n    header: key,\n    skipHeader: true\n  });\n  if (autoWidth) {\n    const arr = json_to_array(key, data);\n    auto_width(ws, arr);\n  }\n  XLSX.utils.book_append_sheet(wb, ws, filename);\n  XLSX.writeFile(wb, filename + '.xlsx');\n};\nexport const export_array_to_excel = ({\n  key,\n  data,\n  title,\n  filename,\n  autoWidth\n}) => {\n  const wb = XLSX.utils.book_new();\n  const arr = json_to_array(key, data);\n  arr.unshift(title);\n  const ws = XLSX.utils.aoa_to_sheet(arr);\n  if (autoWidth) {\n    auto_width(ws, arr);\n  }\n  XLSX.utils.book_append_sheet(wb, ws, filename);\n  XLSX.writeFile(wb, filename + '.xlsx');\n};\nexport const read = (data, type) => {\n  const workbook = XLSX.read(data, {\n    type: type\n  });\n  const firstSheetName = workbook.SheetNames[0];\n  const worksheet = workbook.Sheets[firstSheetName];\n  const header = get_header_row(worksheet);\n  const results = XLSX.utils.sheet_to_json(worksheet);\n  return {\n    header,\n    results\n  };\n};\nexport default {\n  export_table_to_excel,\n  export_array_to_excel,\n  export_json_to_excel,\n  read\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}