{"ast":null,"code":"import axios from 'axios';\nimport { getMenuList } from '@/api/index';\nimport lazyLoading from './lazyLoading.js';\nimport router from '@/router/index';\nimport Cookies from \"js-cookie\";\nlet util = {};\nutil.title = function (title) {\n  title = title || '毕业生追踪系统';\n  window.document.title = title;\n};\nutil.millsToTime = function (mills) {\n  if (!mills) {\n    return \"\";\n  }\n  let s = mills / 1000;\n  if (s < 60) {\n    return s.toFixed(0) + \" 秒\";\n  }\n  let m = s / 60;\n  if (m < 60) {\n    return m.toFixed(0) + \" 分钟\";\n  }\n  let h = m / 60;\n  if (h < 24) {\n    return h.toFixed(0) + \" 小时\";\n  }\n  let d = h / 24;\n  if (d < 30) {\n    return d.toFixed(0) + \" 天\";\n  }\n  let month = d / 30;\n  if (month < 12) {\n    return month.toFixed(0) + \" 个月\";\n  }\n  let year = month / 12;\n  return year.toFixed(0) + \" 年\";\n};\nutil.inOf = function (arr, targetArr) {\n  let res = true;\n  arr.forEach(item => {\n    if (targetArr.indexOf(item) < 0) {\n      res = false;\n    }\n  });\n  return res;\n};\nutil.oneOf = function (ele, targetArr) {\n  if (targetArr.indexOf(ele) >= 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\nutil.getRouterObjByName = function (routers, name) {\n  if (!name || !routers || !routers.length) {\n    return null;\n  }\n  let routerObj = null;\n  for (let item of routers) {\n    if (item.name == name) {\n      return item;\n    }\n    routerObj = util.getRouterObjByName(item.children, name);\n    if (routerObj) {\n      return routerObj;\n    }\n  }\n  return null;\n};\nutil.handleTitle = function (vm, item) {\n  return item.title;\n};\nutil.setCurrentPath = function (vm, name) {\n  let title = '';\n  let isOtherRouter = false;\n  vm.$store.state.app.routers.forEach(item => {\n    if (item.children.length == 1) {\n      if (item.children[0].name == name) {\n        title = util.handleTitle(vm, item);\n        if (item.name == 'otherRouter') {\n          isOtherRouter = true;\n        }\n      }\n    } else {\n      item.children.forEach(child => {\n        if (child.name == name) {\n          title = util.handleTitle(vm, child);\n          if (item.name == 'otherRouter') {\n            isOtherRouter = true;\n          }\n        }\n      });\n    }\n  });\n  let currentPathArr = [];\n  if (name == 'home_index') {\n    currentPathArr = [{\n      title: util.handleTitle(vm, util.getRouterObjByName(vm.$store.state.app.routers, 'home_index')),\n      path: '',\n      name: 'home_index'\n    }];\n  } else if ((name.indexOf('_index') >= 0 || isOtherRouter) && name !== 'home_index') {\n    currentPathArr = [{\n      title: util.handleTitle(vm, util.getRouterObjByName(vm.$store.state.app.routers, 'home_index')),\n      path: '/home',\n      name: 'home_index'\n    }, {\n      title: title,\n      path: '',\n      name: name\n    }];\n  } else {\n    let currentPathObj = vm.$store.state.app.routers.filter(item => {\n      if (item.children.length <= 1) {\n        return item.children[0].name == name;\n      } else {\n        let i = 0;\n        let childArr = item.children;\n        let len = childArr.length;\n        while (i < len) {\n          if (childArr[i].name == name) {\n            return true;\n          }\n          i++;\n        }\n        return false;\n      }\n    })[0];\n    if (currentPathObj.children.length <= 1 && currentPathObj.name == 'home') {\n      currentPathArr = [{\n        title: '首页',\n        path: '',\n        name: 'home_index'\n      }];\n    } else if (currentPathObj.children.length <= 1 && currentPathObj.name !== 'home') {\n      currentPathArr = [{\n        title: '首页',\n        path: '/home',\n        name: 'home_index'\n      }, {\n        title: currentPathObj.title,\n        path: '',\n        name: name\n      }];\n    } else {\n      let childObj = currentPathObj.children.filter(child => {\n        return child.name == name;\n      })[0];\n      currentPathArr = [{\n        title: '首页',\n        path: '/home',\n        name: 'home_index'\n      }, {\n        title: currentPathObj.title,\n        path: '',\n        name: currentPathObj.name\n      }, {\n        title: childObj.title,\n        path: currentPathObj.path + '/' + childObj.path,\n        name: name\n      }];\n    }\n  }\n  vm.$store.commit('setCurrentPath', currentPathArr);\n  return currentPathArr;\n};\nutil.openNewPage = function (vm, name, argu, query) {\n  if (!vm.$store) {\n    return;\n  }\n  let pageOpenedList = vm.$store.state.app.pageOpenedList;\n  let openedPageLen = pageOpenedList.length;\n  let i = 0;\n  let tagHasOpened = false;\n  while (i < openedPageLen) {\n    if (name == pageOpenedList[i].name) {\n      // 页面已经打开\n      vm.$store.commit('pageOpenedList', {\n        index: i,\n        argu: argu,\n        query: query\n      });\n      tagHasOpened = true;\n      break;\n    }\n    i++;\n  }\n  if (!tagHasOpened) {\n    let tag = vm.$store.state.app.tagsList.filter(item => {\n      if (item.children) {\n        return name == item.children[0].name;\n      } else {\n        return name == item.name;\n      }\n    });\n    tag = tag[0];\n    if (tag) {\n      tag = tag.children ? tag.children[0] : tag;\n      if (argu) {\n        tag.argu = argu;\n      }\n      if (query) {\n        tag.query = query;\n      }\n      vm.$store.commit('increateTag', tag);\n    }\n  }\n  vm.$store.commit('setCurrentPageName', name);\n};\nutil.toDefaultPage = function (routers, name, route, next) {\n  let len = routers.length;\n  let i = 0;\n  let notHandle = true;\n  while (i < len) {\n    if (routers[i].name == name && routers[i].children && routers[i].redirect == undefined) {\n      route.replace({\n        name: routers[i].children[0].name\n      });\n      notHandle = false;\n      next();\n      break;\n    }\n    i++;\n  }\n  if (notHandle) {\n    next();\n  }\n};\n\n// 将Csv文件解析为二维数组\nexport const getArrayFromFile = file => {\n  let nameSplit = file.name.split('.');\n  let format = nameSplit[nameSplit.length - 1];\n  return new Promise((resolve, reject) => {\n    let reader = new FileReader();\n    reader.readAsText(file); // 以文本格式读取\n    let arr = [];\n    reader.onload = function (evt) {\n      let data = evt.target.result; // 读到的数据\n      let pasteData = data.trim();\n      arr = pasteData.split(/[\\n\\u0085\\u2028\\u2029]|\\r\\n?/g).map(row => {\n        return row.split('\\t');\n      }).map(item => {\n        return item[0].split(',');\n      });\n      if (format == 'csv') resolve(arr);else reject(new Error('[Format Error]:不是Csv文件'));\n    };\n  });\n};\n\n// 将二维数组转为表格数据\nexport const getTableDataFromArray = array => {\n  let columns = [];\n  let tableData = [];\n  if (array.length > 1) {\n    let titles = array.shift();\n    columns = titles.map(item => {\n      return {\n        title: item,\n        key: item\n      };\n    });\n    tableData = array.map(item => {\n      let res = {};\n      item.forEach((col, i) => {\n        res[titles[i]] = col;\n      });\n      return res;\n    });\n  }\n  return {\n    columns,\n    tableData\n  };\n};\nutil.initRouter = function (vm) {\n  const constRoutes = [];\n  const otherRoutes = [];\n\n  // 404路由需要和动态路由一起加载\n  const otherRouter = [{\n    path: '/*',\n    name: 'error-404',\n    meta: {\n      title: '404-页面不存在'\n    },\n    component: 'template/404'\n  }];\n  // 判断用户是否登录\n  let userInfo = Cookies.get('userInfo');\n  if (!userInfo) {\n    // 未登录\n    return;\n  }\n  if (!vm.$store.state.app.added) {\n    // 第一次加载 读取数据\n    let accessToken = window.localStorage.getItem('accessToken');\n    // 加载菜单\n    axios.get(getMenuList, {\n      headers: {\n        'accessToken': accessToken\n      }\n    }).then(res => {\n      let menuData = res.result;\n      if (!menuData) {\n        return;\n      }\n      util.initAllMenuData(constRoutes, menuData);\n      util.initRouterNode(otherRoutes, otherRouter);\n      // 添加所有主界面路由\n      vm.$store.commit('updateAppRouter', constRoutes.filter(item => item.children.length > 0));\n      // 添加全局路由\n      vm.$store.commit('updateDefaultRouter', otherRoutes);\n      // 添加菜单路由\n      util.initMenuData(vm, menuData);\n      // 缓存数据 修改加载标识\n      window.localStorage.setItem('menuData', JSON.stringify(menuData));\n      vm.$store.commit('setAdded', true);\n    });\n  } else {\n    // 读取缓存数据\n    let data = window.localStorage.getItem('menuData');\n    if (!data) {\n      vm.$store.commit('setAdded', false);\n      return;\n    }\n    let menuData = JSON.parse(data);\n    // 添加菜单路由\n    util.initMenuData(vm, menuData);\n  }\n};\n\n// 添加所有顶部导航栏下的菜单路由\nutil.initAllMenuData = function (constRoutes, data) {\n  let allMenuData = [];\n  data.forEach(e => {\n    if (e.type == -1) {\n      e.children.forEach(item => {\n        allMenuData.push(item);\n      });\n    }\n  });\n  util.initRouterNode(constRoutes, allMenuData);\n};\n\n// 生成菜单格式数据\nutil.initMenuData = function (vm, data) {\n  const menuRoutes = [];\n  let menuData = data;\n  // 顶部菜单\n  let navList = [];\n  menuData.forEach(e => {\n    let nav = {\n      name: e.name,\n      title: e.title,\n      icon: e.icon\n    };\n    navList.push(nav);\n  });\n  if (navList.length < 1) {\n    return;\n  }\n  // 存入vuex\n  vm.$store.commit('setNavList', navList);\n  let currNav = window.localStorage.getItem('currNav');\n  if (currNav) {\n    // 读取缓存title\n    for (var item of navList) {\n      if (item.name == currNav) {\n        vm.$store.commit('setCurrNavTitle', item.title);\n        break;\n      }\n    }\n  } else {\n    // 默认第一个\n    currNav = navList[0].name;\n    vm.$store.commit('setCurrNavTitle', navList[0].title);\n  }\n  vm.$store.commit('setCurrNav', currNav);\n  for (var item of menuData) {\n    if (item.name == currNav) {\n      // 过滤\n      menuData = item.children;\n      break;\n    }\n  }\n  util.initRouterNode(menuRoutes, menuData);\n  // 刷新界面菜单\n  vm.$store.commit('updateMenulist', menuRoutes.filter(item => item.children.length > 0));\n  let tagsList = [];\n  vm.$store.state.app.routers.map(item => {\n    if (item.children.length <= 1) {\n      tagsList.push(item.children[0]);\n    } else {\n      tagsList.push(...item.children);\n    }\n  });\n  vm.$store.commit('setTagsList', tagsList);\n};\n\n// 生成路由节点\nutil.initRouterNode = function (routers, data) {\n  for (var item of data) {\n    let menu = Object.assign({}, item);\n    menu.component = lazyLoading(menu.component);\n    if (item.children && item.children.length > 0) {\n      menu.children = [];\n      util.initRouterNode(menu.children, item.children);\n    }\n    let meta = {};\n    // 给页面添加权限、标题、第三方网页链接\n    meta.permTypes = menu.permTypes ? menu.permTypes : null;\n    meta.title = menu.title ? menu.title + \" - 毕业生追踪系统\" : null;\n    meta.url = menu.url ? menu.url : null;\n    menu.meta = meta;\n    routers.push(menu);\n  }\n};\nexport default util;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}