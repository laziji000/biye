{"ast":null,"code":"import { generateTable, getEntityData } from \"./api.js\";\nexport default {\n  name: \"vue-code\",\n  data() {\n    return {\n      tabName: \"index.vue\",\n      // 控制是否显示读取后端字段窗口\n      findBackFieldModal: false,\n      // 后端字段读取结果\n      findBackFieldContent: \"\",\n      // 后端实体类完整路径\n      entityForm: {\n        path: \"\"\n      },\n      // 生成代码加载标识\n      createCodeLoading: false,\n      // 生成的代码\n      createCodeContent: \"\",\n      // 接口前缀\n      apiPreStr: \"\",\n      // 生成对应位置窗口是否显示\n      codeModal: false,\n      form: {\n        sortOrder: 0,\n        field: \"\",\n        name: \"\",\n        level: \"2\",\n        tableShow: true,\n        editable: true,\n        type: \"text\",\n        searchType: \"text\",\n        searchLevel: \"2\",\n        validate: true,\n        searchable: false,\n        sortable: false,\n        defaultSort: false,\n        defaultSortType: \"desc\"\n      },\n      // 代码生成器表单规则\n      formValidate: {\n        field: [{\n          required: true,\n          message: \"不能为空\",\n          trigger: \"blur\"\n        }],\n        name: [{\n          required: true,\n          message: \"不能为空\",\n          trigger: \"blur\"\n        }]\n      },\n      // 读取后端字段表单规则\n      entityFormValidate: {\n        path: [{\n          required: true,\n          message: \"不能为空\",\n          trigger: \"blur\"\n        }]\n      },\n      // 代码生成器表格列\n      columns: [{\n        title: \"编号\",\n        key: \"sortOrder\",\n        sortType: \"asc\",\n        sortable: true,\n        align: \"center\",\n        minWidth: 90\n      }, {\n        title: \"后端字段名\",\n        slot: \"field\",\n        minWidth: 150\n      }, {\n        title: \"备注\",\n        slot: \"name\",\n        minWidth: 150\n      }, {\n        title: \"表格显示\",\n        slot: \"tableShow\",\n        minWidth: 110\n      }, {\n        title: \"可添加编辑\",\n        slot: \"editable\",\n        minWidth: 110\n      }, {\n        title: \"输入组件\",\n        slot: \"type\",\n        minWidth: 200\n      }, {\n        title: \"非空\",\n        slot: \"validate\",\n        minWidth: 125\n      }, {\n        title: \"搜索\",\n        slot: \"searchable\",\n        minWidth: 100\n      }, {\n        title: \"搜索组件\",\n        slot: \"searchType\",\n        minWidth: 160\n      }, {\n        title: \"排序\",\n        slot: \"sortable\",\n        minWidth: 80\n      }, {\n        title: \"默认排序\",\n        slot: \"defaultSort\",\n        minWidth: 100\n      }, {\n        title: \"默认排序方式\",\n        slot: \"defaultSortType\",\n        minWidth: 150\n      }, {\n        title: \"操作\",\n        slot: \"action\",\n        align: \"center\",\n        fixed: \"right\",\n        width: 90\n      }],\n      // 代码生成器表格值\n      data: [],\n      defaultSort: false,\n      daterangeSearch: false,\n      result: {}\n    };\n  },\n  methods: {\n    init() {\n      let data = this.getStore(\"tableData\");\n      let apiPreStr = this.getStore(\"createCodeApiPre\");\n      let defaultSort = this.getStore(\"tableDefaultSort\");\n      let daterangeSearch = this.getStore(\"tableDaterangeSearch\");\n      if (data && data != \"undefined\") {\n        this.data = JSON.parse(data);\n      }\n      if (apiPreStr && apiPreStr != \"undefined\") {\n        this.apiPreStr = apiPreStr;\n      }\n      if (defaultSort && defaultSort != \"undefined\") {\n        if (defaultSort == \"true\") {\n          this.defaultSort = true;\n        } else {\n          this.defaultSort = false;\n        }\n      }\n      if (daterangeSearch && daterangeSearch != \"undefined\") {\n        if (daterangeSearch == \"true\") {\n          this.daterangeSearch = true;\n        } else {\n          this.daterangeSearch = false;\n        }\n      }\n    },\n    // 读取字段\n    generateEntityData() {\n      this.$refs.entityForm.validate(valid => {\n        if (valid) {\n          getEntityData(this.entityForm.path).then(res => {\n            if (res.success) {\n              this.findBackFieldContent = res.result;\n            }\n          });\n        }\n      });\n    },\n    // 将读取到的后端字段导入到表格\n    submitEntityData() {\n      if (!this.findBackFieldContent) {\n        this.$Message.warning(\"后端实体类没有读到，请重试\");\n        return;\n      }\n      try {\n        let data = JSON.parse(this.findBackFieldContent);\n        this.data = data.data;\n        this.findBackFieldModal = false;\n      } catch (e) {\n        this.$Message.error(\"后端实体类解析异常: \" + e);\n      }\n    },\n    changeField(row, v) {\n      for (let attr in row) {\n        if (row[attr] == null) {\n          row[attr] = \"\";\n        }\n      }\n      let str = JSON.stringify(row);\n      let data = JSON.parse(str);\n      data.field = v.target.value;\n      this.data.splice(row._index, 1, data);\n      this.save();\n    },\n    changeName(row, v) {\n      for (let attr in row) {\n        if (row[attr] == null) {\n          row[attr] = \"\";\n        }\n      }\n      let str = JSON.stringify(row);\n      let data = JSON.parse(str);\n      data.name = v.target.value;\n      this.data.splice(row._index, 1, data);\n      this.save();\n    },\n    changeTableShow(row, v) {\n      for (let attr in row) {\n        if (row[attr] == null) {\n          row[attr] = \"\";\n        }\n      }\n      let str = JSON.stringify(row);\n      let data = JSON.parse(str);\n      data.tableShow = v;\n      this.data.splice(row._index, 1, data);\n      this.save();\n    },\n    changeType(row, v) {\n      for (let attr in row) {\n        if (row[attr] == null) {\n          row[attr] = \"\";\n        }\n      }\n      let str = JSON.stringify(row);\n      let data = JSON.parse(str);\n      data.type = v;\n      this.data.splice(row._index, 1, data);\n      this.save();\n    },\n    changeEditable(row, v) {\n      for (let attr in row) {\n        if (row[attr] == null) {\n          row[attr] = \"\";\n        }\n      }\n      let str = JSON.stringify(row);\n      let data = JSON.parse(str);\n      data.editable = v;\n      this.data.splice(row._index, 1, data);\n      this.save();\n    },\n    changeValidate(row, v) {\n      for (let attr in row) {\n        if (row[attr] == null) {\n          row[attr] = \"\";\n        }\n      }\n      let str = JSON.stringify(row);\n      let data = JSON.parse(str);\n      data.validate = v;\n      this.data.splice(row._index, 1, data);\n      this.save();\n    },\n    changeSearchable(row, v) {\n      for (let attr in row) {\n        if (row[attr] == null) {\n          row[attr] = \"\";\n        }\n      }\n      let str = JSON.stringify(row);\n      let data = JSON.parse(str);\n      data.searchable = v;\n      this.data.splice(row._index, 1, data);\n      this.save();\n    },\n    changeSearchType(row, v) {\n      for (let attr in row) {\n        if (row[attr] == null) {\n          row[attr] = \"\";\n        }\n      }\n      let str = JSON.stringify(row);\n      let data = JSON.parse(str);\n      data.searchType = v;\n      this.data.splice(row._index, 1, data);\n      if (this.daterangeSearch && v != \"daterange\") {\n        this.daterangeSearch = false;\n      } else if (v == \"daterange\") {\n        this.daterangeSearch = true;\n      }\n      this.save();\n    },\n    changeSortable(row, v) {\n      for (let attr in row) {\n        if (row[attr] == null) {\n          row[attr] = \"\";\n        }\n      }\n      let str = JSON.stringify(row);\n      let data = JSON.parse(str);\n      data.sortable = v;\n      this.data.splice(row._index, 1, data);\n      this.save();\n    },\n    changeDefaultSort(row, v) {\n      for (let attr in row) {\n        if (row[attr] == null) {\n          row[attr] = \"\";\n        }\n      }\n      let str = JSON.stringify(row);\n      let data = JSON.parse(str);\n      // 判断默认排序\n      if (this.defaultSort && v) {\n        this.$Message.warning(\"已设定了默认排序的字段，请勿设置多个\");\n        // 恢复禁用\n        data.defaultSort = false;\n      } else if (!this.defaultSort && v) {\n        // 没有记录过\n        data.defaultSort = true;\n        this.defaultSort = true;\n      } else if (this.defaultSort && !v) {\n        // 取消唯一的\n        data.defaultSort = false;\n        this.defaultSort = false;\n      }\n      this.data.splice(row._index, 1, data);\n      this.save();\n    },\n    changeDefaultSortType(row, v) {\n      for (let attr in row) {\n        if (row[attr] == null) {\n          row[attr] = \"\";\n        }\n      }\n      let str = JSON.stringify(row);\n      let data = JSON.parse(str);\n      data.defaultSortType = v;\n      this.data.splice(row._index, 1, data);\n      this.save();\n    },\n    remove(v) {\n      this.data.splice(v._index, 1);\n      this.save();\n      this.$Message.success(\"删除成功\");\n    },\n    clear() {\n      this.$Modal.confirm({\n        title: \"确认清空\",\n        content: \"您确认要清空 ?\",\n        onOk: () => {\n          this.data = [];\n          this.apiPreStr = \"\";\n          this.defaultSort = false;\n          this.daterangeSearch = false;\n          this.save();\n          this.$Message.success(\"清空成功\");\n        }\n      });\n    },\n    generate() {\n      if (!this.apiPreStr) {\n        this.$Message.warning(\"接口前缀不能为空\");\n        return;\n      }\n      this.createCodeLoading = true;\n      generateTable(this.apiPreStr, \"1\", this.data).then(res => {\n        this.createCodeLoading = false;\n        if (res.success) {\n          this.result = res.result;\n          this.changeCode();\n          this.codeModal = true;\n          this.save();\n        }\n      });\n    },\n    changeCode() {\n      if (this.tabName == \"index.vue\") {\n        this.createCodeContent = this.result.componentApi;\n      }\n      if (this.tabName == \"add.vue\") {\n        this.createCodeContent = this.result.addApi;\n      }\n      if (this.tabName == \"edit.vue\") {\n        this.createCodeContent = this.result.editApi;\n      }\n      if (this.tabName == \"api.js\") {\n        this.createCodeContent = this.result.api;\n      }\n    },\n    onCopy() {\n      this.$Message.success(\"复制成功\");\n    },\n    save() {\n      this.setStore(\"tableData\", JSON.stringify(this.data));\n      this.setStore(\"createCodeApiPre\", this.apiPreStr);\n      this.setStore(\"tableDefaultSort\", this.defaultSort);\n      this.setStore(\"tableDaterangeSearch\", this.daterangeSearch);\n    }\n  },\n  mounted() {\n    this.init();\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}