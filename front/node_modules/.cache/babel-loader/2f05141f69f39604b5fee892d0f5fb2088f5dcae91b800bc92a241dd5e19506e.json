{"ast":null,"code":"import { otherRouter } from '@/router/router';\nimport { router } from '@/router/index';\nimport Util from '@/libs/util';\nimport Cookies from 'js-cookie';\nimport Vue from 'vue';\nconst app = {\n  state: {\n    loading: false,\n    // 全局加载动画\n    added: false,\n    // 加载路由标识\n    navList: [],\n    // 顶部菜单\n    currNav: \"\",\n    // 当前顶部菜单name\n    currNavTitle: \"\",\n    // 当前顶部菜单标题\n    cachePage: [],\n    lang: '',\n    isFullScreen: false,\n    openedSubmenuArr: [],\n    // 要展开的菜单数组\n    menuTheme: 'light',\n    // 主题\n    themeColor: '',\n    pageOpenedList: [{\n      title: '首页',\n      path: '',\n      name: 'home_index'\n    }],\n    currentPageName: '',\n    currentPath: [{\n      title: '首页',\n      path: '',\n      name: 'home_index'\n    }],\n    // 面包屑数组\n    menuList: [],\n    routers: [otherRouter],\n    tagsList: [...otherRouter.children],\n    messageCount: 0,\n    // 在这里定义你不想要缓存的页面的name属性值(参见路由配置router.js)\n    dontCache: ['test', 'test']\n  },\n  mutations: {\n    // 动态添加主界面路由，需要缓存\n    updateAppRouter(state, routes) {\n      state.routers.push(...routes);\n      router.addRoutes(routes);\n    },\n    // 动态添加全局路由404、500等页面，不需要缓存\n    updateDefaultRouter(state, routes) {\n      router.addRoutes(routes);\n    },\n    setLoading(state, v) {\n      state.loading = v;\n    },\n    setAdded(state, v) {\n      state.added = v;\n    },\n    setNavList(state, list) {\n      state.navList = list;\n    },\n    setCurrNav(state, v) {\n      state.currNav = v;\n    },\n    setCurrNavTitle(state, v) {\n      state.currNavTitle = v;\n    },\n    setTagsList(state, list) {\n      state.tagsList.push(...list);\n    },\n    updateMenulist(state, routes) {\n      state.menuList = routes;\n    },\n    addOpenSubmenu(state, name) {\n      let hasThisName = false;\n      let isEmpty = false;\n      if (name.length == 0) {\n        isEmpty = true;\n      }\n      if (state.openedSubmenuArr.indexOf(name) > -1) {\n        hasThisName = true;\n      }\n      if (!hasThisName && !isEmpty) {\n        state.openedSubmenuArr.push(name);\n      }\n    },\n    closePage(state, name) {\n      state.cachePage.forEach((item, index) => {\n        if (item == name) {\n          state.cachePage.splice(index, 1);\n        }\n      });\n    },\n    initCachepage(state) {\n      if (localStorage.cachePage) {\n        state.cachePage = JSON.parse(localStorage.cachePage);\n      }\n    },\n    removeTag(state, name) {\n      state.pageOpenedList.map((item, index) => {\n        if (item.name == name) {\n          state.pageOpenedList.splice(index, 1);\n        }\n      });\n    },\n    pageOpenedList(state, get) {\n      let openedPage = state.pageOpenedList[get.index];\n      if (get.argu) {\n        openedPage.argu = get.argu;\n      }\n      if (get.query) {\n        openedPage.query = get.query;\n      }\n      state.pageOpenedList.splice(get.index, 1, openedPage);\n      localStorage.pageOpenedList = JSON.stringify(state.pageOpenedList);\n    },\n    clearAllTags(state) {\n      state.pageOpenedList.splice(1);\n      state.cachePage.length = 0;\n      localStorage.pageOpenedList = JSON.stringify(state.pageOpenedList);\n    },\n    clearOtherTags(state, vm) {\n      let currentName = vm.$route.name;\n      let currentIndex = 0;\n      state.pageOpenedList.forEach((item, index) => {\n        if (item.name == currentName) {\n          currentIndex = index;\n        }\n      });\n      if (currentIndex == 0) {\n        state.pageOpenedList.splice(1);\n      } else {\n        state.pageOpenedList.splice(currentIndex + 1);\n        state.pageOpenedList.splice(1, currentIndex - 1);\n      }\n      let newCachepage = state.cachePage.filter(item => {\n        return item == currentName;\n      });\n      state.cachePage = newCachepage;\n      localStorage.pageOpenedList = JSON.stringify(state.pageOpenedList);\n    },\n    setOpenedList(state) {\n      state.pageOpenedList = localStorage.pageOpenedList ? JSON.parse(localStorage.pageOpenedList) : [otherRouter.children[0]];\n    },\n    setCurrentPath(state, pathArr) {\n      state.currentPath = pathArr;\n    },\n    setCurrentPageName(state, name) {\n      state.currentPageName = name;\n    },\n    setAvatarPath(state, path) {\n      localStorage.avatorImgPath = path;\n    },\n    switchLang(state, lang) {\n      state.lang = lang;\n      localStorage.lang = lang;\n      Vue.config.lang = lang;\n    },\n    clearOpenedSubmenu(state) {\n      state.openedSubmenuArr.length = 0;\n    },\n    setMessageCount(state, count) {\n      state.messageCount = count;\n    },\n    increateTag(state, tagObj) {\n      if (!Util.oneOf(tagObj.name, state.dontCache)) {\n        state.cachePage.push(tagObj.name);\n        localStorage.cachePage = JSON.stringify(state.cachePage);\n      }\n      state.pageOpenedList.push(tagObj);\n      localStorage.pageOpenedList = JSON.stringify(state.pageOpenedList);\n    }\n  }\n};\nexport default app;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}